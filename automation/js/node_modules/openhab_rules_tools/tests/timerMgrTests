var { timerMgr } = require('openhab_rules_tools');

var tm = new timerMgr.TimerMgr();

console.info('Starting timerMgr Tests...');

var keys = [];
for (i = 1; i <= 11; i++) {
  keys.push('timerMgr_Test_' + i);
}
keys.forEach((key) => cache.private.put(key, false));

// Test 1: Timer created
tm.check(keys[0], 100, () => {});

// If timerMgr has a timer stored for the given key, test passes
if (tm.timers[keys[0]].timer) cache.private.put(keys[0], true);

// Test 2: Is flapping
// Test 3: Expired not called
cache.private.put(keys[2], true);
tm.check(keys[1], 1000, () => {
  // If expired func is called, test fails
  cache.private.put(keys[2], false);
});
tm.check(keys[1], 1000, undefined, false, () => {
  // If flappingFunc is called, test passes
  cache.private.put(keys[1], true);
});

// Test 4: Timer expired
tm.check(keys[3], 100, () => {});
setTimeout(() => {
  // If timer is removed from timerMgr, it expired and test passes
  if (!tm.timers[keys[3]]) cache.private.put(keys[3], true);
}, 1100);

// Test 5: No function timer runnning
// Not sure what this test should test
cache.private.put(keys[4], true);

// Test 6: Expired without main function
tm.check(keys[5], 100);
setTimeout(() => {
  // If timer was removed from timerMgr, it expired and test passes
  if (!tm.timers[keys[5]]) cache.private.put(keys[5], true);
}, 1100);

// Test 7: Timer gets rescheduled and both expired ...
// Test 8: and flapping are called
tm.check(keys[6], 1000, () => {
  // If expired func is called, test passes
  cache.private.put(keys[6], true);
});
// Can be called without func here because this is stored
tm.check(keys[6], 1000, undefined, true, () => {
  // If flappingFunc is called, test passes
  cache.private.put(keys[7], true);
});

// Test 9: Expired called
tm.check(keys[8], 100, () => {
  // If expired func is called, test passed
  cache.private.put(keys[8], true);
});

// Test 10: Cancel timer
tm.check(keys[9], 100, () => {});
tm.cancel(keys[9]);
setTimeout(() => {
  // If timer was removed from timerMgr, it was cancelled and test passes
  if (!tm.timers[keys[9]]) cache.private.put(keys[9], true);
}, 1500);

// Test 11: After cancel, both expired ...
// Test 12: and flappingFunc weren't called
cache.private.put(keys[9], true);
cache.private.put(keys[10], true);
tm.check(keys[9], 100, () => {
  // If expired func is called, test fails
  cache.private.get(keys[9], false);
}, undefined, () => {
  // If flappingFunc is called, test fails
  cache.private.get(keys[10], false);
});
tm.cancel(keys[9]);

// Test 12: Cancelling a non-existing timer (doesn't throw an exception)
tm.cancel('nonExistingTimer');

// Check results
setTimeout(() => {
  const passed = keys.map((key) => cache.private.get(key)).reduce((combine, value) => combine && value);
  if (passed) {
    console.info('timerMgr tests passed successfully!');
  } else {
    let failed = [];
    keys.forEach((key) => {
      if (cache.private.get(key) !== true) failed.push(key);
    });
    console.error('timerMgr tests have failed: ' + failed.join(', '));
  }
}, 3000);

console.info('All timerMgr tests have been created. Please wait about 3 seconds for the results.');
